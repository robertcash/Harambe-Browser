//
//  MessagesViewController.swift
//  MessagesExtension
//
//  Created by Robert Cash on 9/5/16.
//  Copyright Â© 2016 Robert Cash. All rights reserved.
//

import UIKit
import Messages

class MessagesViewController: MSMessagesAppViewController {
    
    weak var messagesViewControllerDelegate: MessagesViewControllerDelegate?
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    // MARK: - Helper Methods
    
    func presentViewController(for conversation: MSConversation, with presentationStyle: MSMessagesAppPresentationStyle){
        
        // Remove any child controllers
        for child in self.childViewControllers {
            child.willMove(toParentViewController: nil)
            child.view.removeFromSuperview()
            child.removeFromParentViewController()
        }
        
        let controller: UIViewController
        
        if conversation.selectedMessage?.url == nil {
            // New object so just show current UI in storyboard
            controller = self.instantiateController(browserSession: BrowserSession())
        }
        else {
            // Get url
            let url = conversation.selectedMessage?.url
            print("url: \(url?.absoluteString)")
            
            // Retrival successful, continue.
            controller = self.instantiateController(browserSession: (url?.browserSession)!)
        }
        
        // Embed the new controller.
        self.addChildViewController(controller)
        
        controller.view.frame = self.view.bounds
        controller.view.translatesAutoresizingMaskIntoConstraints = false
        self.view.addSubview(controller.view)
        
        controller.view.leftAnchor.constraint(equalTo: self.view.leftAnchor).isActive = true
        controller.view.rightAnchor.constraint(equalTo: self.view.rightAnchor).isActive = true
        controller.view.topAnchor.constraint(equalTo: self.view.topAnchor).isActive = true
        controller.view.bottomAnchor.constraint(equalTo: self.view.bottomAnchor).isActive = true
        
        controller.didMove(toParentViewController: self)
    }
    
    private func instantiateController(browserSession: BrowserSession) -> UIViewController {
        let controller = (storyboard?.instantiateViewController(withIdentifier: BrowserViewController.storyboardIdentifier) as? BrowserViewController)!
        controller.browserSession = browserSession
        controller.browserViewControllerDelegate = self
        controller.parentController = self
        
        return controller
    }
    
    func composeMessage(with browserSession: BrowserSession, session: MSSession? = nil) -> MSMessage {
        
        let layout = MSMessageTemplateLayout()
        layout.image = browserSession.browserSnapshot
        layout.caption = String.localizedStringWithFormat(
            NSLocalizedString("%@ sent a browser!",
                              comment: "send"),
            "$\(activeConversation!.localParticipantIdentifier.uuidString)")
        
        let message = MSMessage(session: session ?? MSSession())
        message.url = browserSession.currentWebsite?.toUrl
        message.layout = layout
        message.summaryText = String.localizedStringWithFormat(
            NSLocalizedString("%@ sent a browser!",
                              comment: "send"),
            "$\(activeConversation!.localParticipantIdentifier.uuidString)")
        message.accessibilityLabel = String.localizedStringWithFormat(
            NSLocalizedString("%@ sent a browser!",
                              comment: "send"),
            "$\(activeConversation!.localParticipantIdentifier.uuidString)")
        
        return message
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
        presentViewController(for: conversation, with: presentationStyle)
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
        if conversation == activeConversation {
            presentViewController(for: conversation, with: presentationStyle)
        }
    }
    
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        messagesViewControllerDelegate?.updateConstraints()
    }
    
}

// MARK: - Protocols
protocol MessagesViewControllerDelegate: class {
    func updateConstraints()
}

// MARK: - Extensions

extension MessagesViewController: BrowserViewControllerDelegate {
    
    func sendBrowser(browserSession: BrowserSession){
        // Create browser message
        let messageToSend = composeMessage(with: browserSession, session: activeConversation?.selectedMessage?.session)
        
        // Add the message to the conversation.
        activeConversation?.insert(messageToSend) { error in
            if let error = error {
                print(error)
            }
        }
        
        dismiss()
    }
    
    func expand(){
        self.requestPresentationStyle(.expanded)
    }
    
}
